-- update

function in_cells(cell,cells)
 assert(type(cell)=="table")
 assert(type(cell.c)=="number")
 assert(type(cell.r)=="number")
 assert(type(cells)=="table")
 
 local possible = false
  for cell_i in all(cells) do
  if (cell.c == cell_i.c and
   cell.r == cell_i.r) then
   return true
  end
 end
 return false
end

function find_bees()
 local bees = {}
 for row = 2,b-1 do
  for col = 1,b do
   if not (row%2 == 1 and col == b) then
    local stack = board[row][col].b
    if stack != nil then
     for i = 1,#stack do
      local tile = stack[i]
      local t = tile.t
      local s = tile.s
      if s==bee then
       bees[t] = {c=col, r=row}
      end 
     end
    end 
    local t = board[row][col].t
    local s = board[row][col].s
    if s==bee then
     bees[t] = {c=col, r=row}
    end
   end
  end
 end
 return bees
end

function update_possibilities()
 local p
 if cur.from != nil and cur.from.r == b then
  possibilities = p
  return
 end
 if cur.s == bee then
  p = nearby_cells(cur.c, cur.r)
  for cell in all(p) do
   if board[cell.r][cell.c].t != 0 then
    del(p, cell)
   end
  end
 elseif cur.s == ant then
  p = nearby_cells(cur.c, cur.r)
  for cell in all(p) do
   if board[cell.r][cell.c].t != 0 then
    del(p, cell)
   end
  end
 elseif cur.s == spi then
  p = nearby_cells(cur.c, cur.r)
  for cell in all(p) do
   if board[cell.r][cell.c].t != 0 then
    del(p, cell)
   end
  end
 elseif cur.s == btl then
  p = nearby_cells(cur.c, cur.r)
  //ignore freedom of movement
  //rule for beetles on top
  for cell in all(p) do
   //climbing up
   if board[cell.r][cell.c].t != 0 then
    cell.blocked = nil
   end
   //climbing down or across
   if board[cur.from.r][cur.from.c].t != 0 then
    cell.blocked = nil
   end
  end
 elseif cur.s == cri then
  p = {}
  local dir_funcs = {left,right,
   up_left,up_right,
   down_left,down_right}
  for dir_func in all(dir_funcs) do
   local next = next_empty(cur, dir_func)
   if next != nil
   and not in_cells(next, nearby_cells(cur.c, cur.r)) then
    add(p, next)
   end
  end 
  if #p == 0 then
   p = nil
  end
 end
 
 for cell in all(p) do
  local nearby = nearby_cells(cell.c, cell.r)
  local stats = nearby_stats(nearby, player)
  if stats.full == 0 then
   del(p, cell)
  end
 end
  
 possibilities = p
end

function next_empty(cell, dir_func)
 assert(type(cell)=="table")
 assert(type(cell.c)=="number")
 assert(type(cell.r)=="number")
 assert(type(dir_func)=="function")
 
 local next = dir_func(cell.c, cell.r)
 while next != nil and 
  on_board(next.c, next.r) do
  if board[next.r][next.c].t!=0 then
   next = next_empty(next, dir_func)
  end
  return next
 end
end

function grab_or_place(undo)
 assert(type(undo)=="boolean")
 
 local r = cur.r
 local c = cur.c
 if undo then
  r = cur.from.r
  c = cur.from.c
  cur.r = r
  cur.c = c
  cur.from = nil
 end
 if r < b then
  if cur.t == 0 then
   //grab if cursor empty
   if board[r][c].t == player then
    local stack = board[r][c].b
    if not stack then
     local bees = find_bees()
     if bees[player] == nil then
      message = "cant move until bee is placed"
      return
     end
     cur.from = {c=c, r=r}
     cur.t = board[r][c].t
     cur.s = board[r][c].s
     board[r][c].t = 0
     board[r][c].s = 0
     update_possibilities()
    else
     //if there is a beetle stack
     cur.t = board[r][c].t
     cur.s = board[r][c].s
     cur.from = {c=c, r=r}
     local stacked = stack[#stack]
     board[r][c].t = stacked.t
     board[r][c].s = stacked.s
     update_possibilities()
     del(stack, stacked)
     if #stack == 0 then
      //can't nil stack
      //or it doesnt remove it
      board[r][c].b = nil
     end
    end
   end
  else
   //place if cell empty
   if board[r][c].t == 0 then
    if turns == 0 and
     (r != 8 or c != 8) then
     message = "must place first bug in center"
     return
    else
     if turns == 1 then
      local nearby = nearby_cells(8,8)
      local possible = in_cells(cur,nearby)
      if not possible then
       message = "2nd bug must touch first"
       return
      end
     end
     if rounds > 0 and cur.from != nil and cur.from.r < b then
      if possibilities != nil then
       if not in_cells(cur, possibilities) then
        message = "invalid"
        return
       end
      end
     elseif rounds > 0 and cur.from != nil and cur.from.r == b then
      local nearby = nearby_cells(c,r)
      local stats = nearby_stats(nearby, player)
      if stats.friend < 1 then
       message = "bug must touch same color"
       return
      elseif stats.foe > 0 then
       message = "bug can only touch own color"
       return
      end
     end
     board[r][c].t = cur.t
     board[r][c].s = cur.s
     cur.s = 0
     cur.t = 0
     cur.from = nil
     update_possibilities()
    end
   //place on top if beetle
   elseif cur.s == btl then
    if cur.from != nil and cur.from.r == b then
     message = "can not stack beetle from hand"
     return
    end
    
    if not board[r][c].b then
     board[r][c].b = {}
    end
    local stacked = {t=board[r][c].t,
               s=board[r][c].s}
    add(board[r][c].b, stacked)
    board[r][c].t = cur.t
    board[r][c].s = cur.s
    cur.s = 0
    cur.t = 0
    cur.from = nil
    update_possibilities()
   end
  end
 else
  if cur.t == 0 then
   //grab if cursor empty
   if hands[player][c].t != 0 then
    cur.from = {c=c, r=r}
    cur.t = hands[player][c].t
    cur.s = hands[player][c].s
    hands[player][c].t = 0
    hands[player][c].s = 0
    update_possibilities()
   end
  else
   //place if cell empty
   if hands[player][c].t == 0 then
    hands[player][c].t = cur.t
    hands[player][c].s = cur.s
    cur.s = 0
    cur.t = 0
    cur.from = nil
    update_possibilities()
   end
  end
 end
end

function toggle_player()
 if cur.t == 0 then
  if not can_end_turn() then
   return
  end
  if player == black then
   player = white
  elseif player == white then
   player = black
  end
  turns += 1
  rounds = flr(turns / 2)
  check_win()
 else
  grab_or_place(true)
 end
end

function can_end_turn()
 if turns == 0 then
  if board[8][8].t == 0  then
   message = "must place bug on 1st turn"
   return false
  end
 elseif turns == 1 then
  local nearby = nearby_cells(8,8)
  for cell in all(nearby) do
   if board[cell.r][cell.c].t != 0 then
    return true
   end
  end
  message = "must place bug on 2nd turn"
  return false
 elseif would_break_hive() then
  message = "cannot break up hive"
  return false
 elseif rounds == 4 then
  local hand = hands[player] 
  for i=1,#hand do
   local tile = hand[i]
   if tile.s == bee then
    message = "must place bee by 4th turn"
    return false
   end
  end
 end
 message = ""
 return true
end

function check_connected(tile,tiles)
 assert(type(tile)=="table")
 assert(type(tile.c)=="number")
 assert(type(tile.r)=="number")
 assert(type(tiles)=="table")
 assert(#tiles != 0)
 
 if tile.connected then
  return
 end
 
 tile.connected = true
 
 local nearby = nearby_cells(tile.c, tile.r)
 
 for nt in all(nearby) do
  for t in all(tiles) do
   if t.c == nt.c and t.r == nt.r then
    check_connected(t, tiles)
   end
  end
 end
end

function would_break_hive()
 local tiles = {}
 
 for row = 2,b-1 do
  for col = 1,b do
   if not (row%2 == 1 and col == b) then
    if board[row][col].t != 0 then
     add(tiles, {c=col, r=row})
    end
   end
  end
 end
 
 check_connected(tiles[1], tiles)
 
 for tile in all(tiles) do
  if not tile.connected then
   return true
  end
 end
 return false
end

function check_win()
 local bees = find_bees()
 for player = 1,2 do
  if bees[player] != nil then
   local col = bees[player].c
   local row = bees[player].r
   local nearby = nearby_cells(col,row)
   local stats = nearby_stats(nearby,player)
   if stats.full == #nearby then
    game_over()
   end
  end
 end 
end

function on_board(col, row)
 assert(type(col)=="number")
 assert(type(row)=="number")
 
 local hex = row % 2
 if row < 2 then return false end
 if row > b-1 then return false end
 if col < 1 then return false end
 if col+hex > b then return false end

 return true
end

function left(col, row)
 assert(type(col)=="number")
 assert(type(row)=="number")
 return {c=col-1, r=row}
end

function right(col, row)
 assert(type(col)=="number")
 assert(type(row)=="number")
 return {c=col+1, r=row}
end

function up_left(col, row)
 assert(type(col)=="number")
 assert(type(row)=="number")
 local hex = row % 2 - 1
 return {c=col+hex, r=row-1}
end

function up_right(col, row)
 assert(type(col)=="number")
 assert(type(row)=="number")
 local hex = row % 2 - 1
 return {c=col+hex+1, r=row-1}
end

function down_left(col, row)
 assert(type(col)=="number")
 assert(type(row)=="number")
 local hex = row % 2 - 1
 return {c=col+hex, r=row+1}
end

function down_right(col, row)
 assert(type(col)=="number")
 assert(type(row)=="number")
 local hex = row % 2 - 1
 return {c=col+hex+1, r=row+1}
end

function nearby_cells(col, row)
 assert(type(col)=="number")
 assert(type(row)=="number")
 
 local nearby = {}
 if row == b then
  return nearby
 end
 
 add(nearby, up_left(col,row))
 add(nearby, up_right(col,row))
 add(nearby, right(col,row))
 add(nearby, down_right(col,row))
 add(nearby, down_left(col,row))
 add(nearby, left(col,row))
 
 //determine which cells are
 //blocked (freedom to move rule)
 for p=1,6 do
  local prev = nearby[p]

  local c = p + 1
  if c > 6 then c -= 6 end
  local cell = nearby[c]
  
  local n = p + 2
  if n > 6 then n -= 6 end
  local next = nearby[n]
  
  if on_board(prev.c, prev.r) and
   board[prev.r][prev.c].t != 0 and
   on_board(next.c, next.r) and
   board[next.r][next.c].t != 0 then

   cell.blocked=true
  end
 end

 for cell in all(nearby) do
  if not on_board(cell.c, cell.r) then
   del(nearby, cell)
  end
 end
 
 return nearby
end

function nearby_stats(nearby,team)
 assert(type(nearby)=="table")
 assert(type(team)=="number")
 assert(team!=0)
 
 local stats = {empty=0, full=0,
          friend=0, foe=0}
 for cell in all(nearby) do
  local tile = board[cell.r][cell.c]
  if tile.t == 0 then
   stats.empty+=1
  elseif tile.t == team then
   stats.full+=1
   stats.friend+=1
  else
   stats.full+=1
   stats.foe+=1
  end
 end
 
 return stats
end

function _update()
 if state == "start" or
    state == "over" then
  if(btnp(❎)) then
   reset()
  end
  if btnp(🅾️) then
   toggle_manual()
  end
 elseif state == "playing" then
  if btnp(⬅️) or btnp(➡️) or
   btnp(⬆️) or btnp(⬇️) then
   message = ""
  end
  if btnp(⬅️) then cur.c-=1 end
  if btnp(➡️) then cur.c+=1 end
  if btnp(⬆️) then cur.r-=1 end
  if btnp(⬇️) then cur.r+=1 end
  if cur.c < 1 then cur.c=1 end
  if cur.c > b then cur.c=b end
  if cur.r < 2 then cur.r=2 end
  if cur.r > b then cur.r=b end
  if cur.r%2==1 and cur.c==b then
   cur.c=b-1
  end	  
  if btnp(🅾️) then
   grab_or_place(false)
  end
  if btnp(❎) then
   toggle_player(true)
  end
 elseif state == "manual" then
  if btnp(🅾️) then
   toggle_manual()
  end
  if btnp(❎) then
   manual_page()
  end
 end
end
